{"ast":null,"code":"var _jsxFileName = \"/Users/liuxinyu/Desktop/ScribeAR.github.io/src/App.js\";\nimport React from 'react';\nimport { useSelector } from 'react-redux';\nimport TopSpace from './components/TopSpace';\nimport Captions from './components/Captions';\nimport './App.css';\nexport default function App() {\n  // Get global state from Redux. See the React Redux tutorial.\n  const textSize = useSelector(state => state.textSize);\n  const numLines = useSelector(state => state.numLines);\n  const invertColors = useSelector(state => state.invertColors); // Convert variables to CSS-friendly strings.\n\n  var sizeString = textSize + 'vh'; // Size of bottom space (text area) relative to text size and number of lines.\n  // 1.5 is an estimate of the ratio of line size to text size.\n  // This is a sloppy way of calculating the height. Please improve on this.\n\n  var botHeight = textSize * numLines * 1.17; // topHeight + botHeight should always = 100vh because we don't want the full\n  // page to scroll (we only want the individual areas to scroll).\n\n  var topHeight = 100 - botHeight + 'vh';\n  botHeight += 'vh';\n  var bgColor = invertColors ? 'white' : 'black';\n  var color = invertColors ? 'black' : 'white'; // You can't comment in JSX.\n  // The style tag is the easiest way to set style based on JS variables.\n\n  return React.createElement(\"div\", {\n    className: \"App\",\n    style: {\n      backgroundColor: bgColor,\n      color: color\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, React.createElement(TopSpace, {\n    height: topHeight,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }), React.createElement(Captions, {\n    height: botHeight,\n    textSize: sizeString,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }));\n}","map":{"version":3,"sources":["/Users/liuxinyu/Desktop/ScribeAR.github.io/src/App.js"],"names":["React","useSelector","TopSpace","Captions","App","textSize","state","numLines","invertColors","sizeString","botHeight","topHeight","bgColor","color","backgroundColor"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,OAAOC,QAAP,MAAqB,uBAArB;AACA,OAAOC,QAAP,MAAqB,uBAArB;AACA,OAAO,WAAP;AAEA,eAAe,SAASC,GAAT,GAAe;AACzB;AACA,QAAMC,QAAQ,GAAGJ,WAAW,CAAEK,KAAD,IAAWA,KAAK,CAACD,QAAlB,CAA5B;AACA,QAAME,QAAQ,GAAGN,WAAW,CAAEK,KAAD,IAAWA,KAAK,CAACC,QAAlB,CAA5B;AACA,QAAMC,YAAY,GAAGP,WAAW,CAAEK,KAAD,IAAWA,KAAK,CAACE,YAAlB,CAAhC,CAJyB,CAKzB;;AACA,MAAIC,UAAU,GAAGJ,QAAQ,GAAG,IAA5B,CANyB,CAOzB;AACA;AACA;;AACA,MAAIK,SAAS,GAAGL,QAAQ,GAAGE,QAAX,GAAsB,IAAtC,CAVyB,CAWzB;AACA;;AACA,MAAII,SAAS,GAAG,MAAMD,SAAN,GAAkB,IAAlC;AACAA,EAAAA,SAAS,IAAI,IAAb;AACA,MAAIE,OAAO,GAAGJ,YAAY,GAAG,OAAH,GAAa,OAAvC;AACA,MAAIK,KAAK,GAAGL,YAAY,GAAG,OAAH,GAAa,OAArC,CAhByB,CAiBzB;AACA;;AACA,SACK;AAAK,IAAA,SAAS,EAAC,KAAf;AAAqB,IAAA,KAAK,EAAE;AACvBM,MAAAA,eAAe,EAAEF,OADM;AAEvBC,MAAAA,KAAK,EAAEA;AAFgB,KAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAGK,oBAAC,QAAD;AAAU,IAAA,MAAM,EAAEF,SAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHL,EAIK,oBAAC,QAAD;AAAU,IAAA,MAAM,EAAED,SAAlB;AAA6B,IAAA,QAAQ,EAAED,UAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJL,CADL;AAQJ","sourcesContent":["import React from 'react';\nimport { useSelector } from 'react-redux'\nimport TopSpace from './components/TopSpace'\nimport Captions from './components/Captions'\nimport './App.css'\n\nexport default function App() {\n     // Get global state from Redux. See the React Redux tutorial.\n     const textSize = useSelector((state) => state.textSize)\n     const numLines = useSelector((state) => state.numLines)\n     const invertColors = useSelector((state) => state.invertColors)\n     // Convert variables to CSS-friendly strings.\n     var sizeString = textSize + 'vh'\n     // Size of bottom space (text area) relative to text size and number of lines.\n     // 1.5 is an estimate of the ratio of line size to text size.\n     // This is a sloppy way of calculating the height. Please improve on this.\n     var botHeight = textSize * numLines * 1.17\n     // topHeight + botHeight should always = 100vh because we don't want the full\n     // page to scroll (we only want the individual areas to scroll).\n     var topHeight = 100 - botHeight + 'vh'\n     botHeight += 'vh'\n     var bgColor = invertColors ? 'white' : 'black'\n     var color = invertColors ? 'black' : 'white'\n     // You can't comment in JSX.\n     // The style tag is the easiest way to set style based on JS variables.\n     return (\n          <div className=\"App\" style={{\n               backgroundColor: bgColor,\n               color: color }}>\n               <TopSpace height={topHeight} />\n               <Captions height={botHeight} textSize={sizeString} />\n          </div>\n     )\n}\n"]},"metadata":{},"sourceType":"module"}