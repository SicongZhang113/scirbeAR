{"ast":null,"code":"var _jsxFileName = \"/Users/sicongzhang/Documents/ScribeAR/ver3_5/src/components/MiddleSpace/Loudness/index.js\";\nimport React, { Component } from 'react';\nimport AudioAnalyser from './AudioAnalyser';\nimport { useSelector, useDispatch } from 'react-redux';\n/*global setting*/\n\nclass Index extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      audio: null\n    }; //this.toggleMicrophone = this.toggleMicrophone.bind(this);\n  }\n\n  async getMicrophone() {\n    const audio = await navigator.mediaDevices.getUserMedia({\n      audio: true,\n      video: false\n    });\n    this.setState({\n      audio\n    });\n  }\n\n  stopMicrophone() {\n    this.state.audio.getTracks().forEach(track => track.stop());\n    this.setState({\n      audio: null\n    });\n  } //  toggleMicrophone() {\n  //   if (this.state.audio) {\n  //     this.stopMicrophone();\n  //   } else {\n  //     this.getMicrophone();\n  //   }\n  // }\n\n\n  render() {\n    return;\n    React.createElement(\"div\", {\n      className: \"controls\",\n      style: {\n        height: \"100%\",\n        width: \"100%\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, setting = useSelector(state => state.mic), setting ? this.stopMicrophone() : this.getMicrophone(), setting ? React.createElement(AudioAnalyser, {\n      audio: this.state.audio,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }) : '');\n  }\n\n}\n\nexport default Index; // <button onClick={this.toggleMicrophone} style = {{\n//   position:\"fixed\",\n//   top:\"35vh\",\n//   left:\"65vw\",\n//   width:\"10vw\",\n//   height:\"10vh\",\n//   fontSize: \"1.5vw\",\n//   textAlign: \"left\"\n// }}>\n//   {this.state.audio ? 'Stop MIC' : 'Get MIC input'}\n// </button>","map":{"version":3,"sources":["/Users/sicongzhang/Documents/ScribeAR/ver3_5/src/components/MiddleSpace/Loudness/index.js"],"names":["React","Component","AudioAnalyser","useSelector","useDispatch","Index","constructor","props","state","audio","getMicrophone","navigator","mediaDevices","getUserMedia","video","setState","stopMicrophone","getTracks","forEach","track","stop","render","height","width","setting","mic"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA;;AACA,MAAMC,KAAN,SAAoBJ,SAApB,CAA8B;AAC5BK,EAAAA,WAAW,CAACC,KAAD,EAAQ;AAClB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,KAAK,EAAE;AADI,KAAb,CAFkB,CAMnB;AACA;;AAED,QAAMC,aAAN,GAAsB;AACnB,UAAMD,KAAK,GAAG,MAAME,SAAS,CAACC,YAAV,CAAuBC,YAAvB,CAAoC;AACtDJ,MAAAA,KAAK,EAAE,IAD+C;AAEtDK,MAAAA,KAAK,EAAE;AAF+C,KAApC,CAApB;AAIA,SAAKC,QAAL,CAAc;AAAEN,MAAAA;AAAF,KAAd;AACD;;AAEDO,EAAAA,cAAc,GAAG;AACd,SAAKR,KAAL,CAAWC,KAAX,CAAiBQ,SAAjB,GAA6BC,OAA7B,CAAqCC,KAAK,IAAIA,KAAK,CAACC,IAAN,EAA9C;AACA,SAAKL,QAAL,CAAc;AAAEN,MAAAA,KAAK,EAAE;AAAT,KAAd;AACD,GArB0B,CAuB5B;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGAY,EAAAA,MAAM,GAAE;AACN;AACA;AAAK,MAAA,SAAS,EAAC,UAAf;AAA0B,MAAA,KAAK,EAAI;AAACC,QAAAA,MAAM,EAAC,MAAR;AAAeC,QAAAA,KAAK,EAAC;AAArB,OAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACEC,OAAO,GAAGrB,WAAW,CAAEK,KAAD,IAAWA,KAAK,CAACiB,GAAlB,CADvB,EAEED,OAAO,GAAG,KAAKR,cAAL,EAAH,GAA2B,KAAKN,aAAL,EAFpC,EAGEc,OAAO,GAAI,oBAAC,aAAD;AAAe,MAAA,KAAK,EAAE,KAAKhB,KAAL,CAAWC,KAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAJ,GAAiD,EAH1D;AAMD;;AAxC2B;;AA4C9B,eAAeJ,KAAf,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { Component } from 'react';\nimport AudioAnalyser from './AudioAnalyser';\nimport { useSelector, useDispatch } from 'react-redux'\n/*global setting*/\nclass Index extends Component {\n  constructor(props) {\n   super(props);\n   this.state = {\n     audio: null\n   };\n\n  //this.toggleMicrophone = this.toggleMicrophone.bind(this);\n }\n\n async getMicrophone() {\n    const audio = await navigator.mediaDevices.getUserMedia({\n      audio: true,\n      video: false\n    });\n    this.setState({ audio });\n  }\n\n  stopMicrophone() {\n     this.state.audio.getTracks().forEach(track => track.stop());\n     this.setState({ audio: null });\n   }\n\n  //  toggleMicrophone() {\n  //   if (this.state.audio) {\n  //     this.stopMicrophone();\n  //   } else {\n  //     this.getMicrophone();\n  //   }\n  // }\n\n\n  render(){\n    return\n    <div className=\"controls\" style = {{height:\"100%\",width:\"100%\"}}>\n    { setting = useSelector((state) => state.mic)}\n    { setting ? this.stopMicrophone() : this.getMicrophone()}\n    { setting  ? <AudioAnalyser audio={this.state.audio} /> : ''}\n    </div>;\n\n  }\n\n}\n\nexport default Index;\n\n// <button onClick={this.toggleMicrophone} style = {{\n//   position:\"fixed\",\n//   top:\"35vh\",\n//   left:\"65vw\",\n//   width:\"10vw\",\n//   height:\"10vh\",\n//   fontSize: \"1.5vw\",\n//   textAlign: \"left\"\n// }}>\n//   {this.state.audio ? 'Stop MIC' : 'Get MIC input'}\n// </button>\n"]},"metadata":{},"sourceType":"module"}