{"ast":null,"code":"var _jsxFileName = \"/Users/liuxinyu/Desktop/ScribeAR.github.io/src/components/TopSpace/index.js\";\nimport React from 'react';\nimport './index.css';\nimport Options from './Options'; // JavaScript functions used: setTimeout, clearTimeout, bind, getElementById,\n// addEventListener, removeEventListener\n// React functions used: constructor, setState, componentDidMount, render\n\nclass TopSpace extends React.Component {\n  // When options are shown:\n  // Clicking in the optionsSpace triggers show() then resetTimeout().\n  // Clicking in the hideSpace triggers hide().\n  // When options are not shown:\n  // Clicking anywhere in the outer div triggers show().\n  // Event listeners enforce these rules in outer and optionsSpace elements.\n  // hideSpace uses a simple onClick, which only works when the element is shown.\n  constructor(props) {\n    super(props);\n    this.state = {\n      shown: true,\n      // Whether the options area is shown. Used in JSX.\n      // Set 15 second timeout and when it expires, run this.hide.\n      // Immediately store the returned id for later use.\n      timeoutId: setTimeout(this.hide.bind(this), 15000)\n    }; // Bind functions so we can use the keyword 'this' inside them.\n\n    this.hide = this.hide.bind(this);\n    this.show = this.show.bind(this);\n    this.resetTimeout = this.resetTimeout.bind(this);\n  }\n\n  hide() {\n    // Hide the options area from view.\n    this.setState({\n      shown: false\n    });\n    document.getElementById('outer').addEventListener('click', this.show);\n  }\n\n  show() {\n    // Show the options area. If already shown, just reset timeout.\n    this.setState({\n      shown: true\n    });\n    document.getElementById('outer').removeEventListener('click', this.show);\n    this.resetTimeout();\n  }\n\n  resetTimeout() {\n    // Reset the 15 second timer for hiding the options.\n    clearTimeout(this.state.timeoutId); // Cancel the timeout set earlier.\n\n    var toId = setTimeout(this.hide, 15000); // Set a new 15 second timeout.\n\n    this.setState({\n      timeoutId: toId\n    }); // Store the id of the new timeout.\n  } // The first time the component mounts, add an event listener to the options\n  // space, so whenever it's clicked, it shows.\n\n\n  componentDidMount() {\n    document.getElementById('optionsSpace').addEventListener('click', this.show);\n  }\n\n  render() {\n    var h = \"1%\"; // I don't remember why I set the height like this.\n    // The Options component takes a function as a prop.\n\n    return React.createElement(\"div\", {\n      className: \"TopSpace\",\n      id: \"outer\",\n      style: {\n        height: h\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"Container \" + (this.state.shown ? \"shown\" : \"hidden\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: \"optionsSpace\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, React.createElement(Options, {\n      resetTimeout: this.resetTimeout,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      id: \"hideSpace\",\n      onClick: this.hide,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, \"Hide\")));\n  }\n\n}\n\nexport default TopSpace;","map":{"version":3,"sources":["/Users/liuxinyu/Desktop/ScribeAR.github.io/src/components/TopSpace/index.js"],"names":["React","Options","TopSpace","Component","constructor","props","state","shown","timeoutId","setTimeout","hide","bind","show","resetTimeout","setState","document","getElementById","addEventListener","removeEventListener","clearTimeout","toId","componentDidMount","render","h","height"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,aAAP;AACA,OAAOC,OAAP,MAAoB,WAApB,C,CAEA;AACA;AACA;;AACA,MAAMC,QAAN,SAAuBF,KAAK,CAACG,SAA7B,CAAuC;AAClC;AACK;AACA;AACL;AACK;AACL;AACA;AAEAC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACd,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACRC,MAAAA,KAAK,EAAE,IADC;AACK;AACb;AACA;AACAC,MAAAA,SAAS,EAAEC,UAAU,CAAC,KAAKC,IAAL,CAAUC,IAAV,CAAe,IAAf,CAAD,EAAuB,KAAvB;AAJb,KAAb,CAFc,CAQd;;AACA,SAAKD,IAAL,GAAY,KAAKA,IAAL,CAAUC,IAAV,CAAe,IAAf,CAAZ;AACA,SAAKC,IAAL,GAAY,KAAKA,IAAL,CAAUD,IAAV,CAAe,IAAf,CAAZ;AACA,SAAKE,YAAL,GAAoB,KAAKA,YAAL,CAAkBF,IAAlB,CAAuB,IAAvB,CAApB;AACJ;;AAEDD,EAAAA,IAAI,GAAG;AAAE;AACJ,SAAKI,QAAL,CAAc;AAAEP,MAAAA,KAAK,EAAE;AAAT,KAAd;AACAQ,IAAAA,QAAQ,CAACC,cAAT,CAAwB,OAAxB,EAAiCC,gBAAjC,CAAkD,OAAlD,EAA2D,KAAKL,IAAhE;AACJ;;AAEDA,EAAAA,IAAI,GAAG;AAAE;AACJ,SAAKE,QAAL,CAAc;AAAEP,MAAAA,KAAK,EAAE;AAAT,KAAd;AACAQ,IAAAA,QAAQ,CAACC,cAAT,CAAwB,OAAxB,EAAiCE,mBAAjC,CAAqD,OAArD,EAA8D,KAAKN,IAAnE;AACA,SAAKC,YAAL;AACJ;;AAEDA,EAAAA,YAAY,GAAG;AAAE;AACZM,IAAAA,YAAY,CAAC,KAAKb,KAAL,CAAWE,SAAZ,CAAZ,CADU,CACyB;;AACnC,QAAIY,IAAI,GAAGX,UAAU,CAAC,KAAKC,IAAN,EAAY,KAAZ,CAArB,CAFU,CAE8B;;AACxC,SAAKI,QAAL,CAAc;AAACN,MAAAA,SAAS,EAAEY;AAAZ,KAAd,EAHU,CAGuB;AACrC,GAtCiC,CAuClC;AACA;;;AACAC,EAAAA,iBAAiB,GAAG;AACfN,IAAAA,QAAQ,CAACC,cAAT,CAAwB,cAAxB,EAAwCC,gBAAxC,CAAyD,OAAzD,EAAkE,KAAKL,IAAvE;AACJ;;AAEDU,EAAAA,MAAM,GAAG;AACJ,QAAIC,CAAC,GAAG,IAAR,CADI,CACU;AACd;;AACA,WACK;AAAK,MAAA,SAAS,EAAC,UAAf;AAA0B,MAAA,EAAE,EAAC,OAA7B;AAAqC,MAAA,KAAK,EAAE;AAAEC,QAAAA,MAAM,EAAED;AAAV,OAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK;AAAK,MAAA,SAAS,EAAE,gBAAgB,KAAKjB,KAAL,CAAWC,KAAX,GAAmB,OAAnB,GAA6B,QAA7C,CAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK;AAAK,MAAA,EAAE,EAAC,cAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,oBAAC,OAAD;AAAS,MAAA,YAAY,EAAE,KAAKM,YAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADL,CADL,EAIK;AAAK,MAAA,EAAE,EAAC,WAAR;AAAoB,MAAA,OAAO,EAAE,KAAKH,IAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJL,CADL,CADL;AAUJ;;AA1DiC;;AA6DvC,eAAeR,QAAf","sourcesContent":["import React from 'react'\r\nimport './index.css'\r\nimport Options from './Options'\r\n\r\n// JavaScript functions used: setTimeout, clearTimeout, bind, getElementById,\r\n// addEventListener, removeEventListener\r\n// React functions used: constructor, setState, componentDidMount, render\r\nclass TopSpace extends React.Component {\r\n     // When options are shown:\r\n          // Clicking in the optionsSpace triggers show() then resetTimeout().\r\n          // Clicking in the hideSpace triggers hide().\r\n     // When options are not shown:\r\n          // Clicking anywhere in the outer div triggers show().\r\n     // Event listeners enforce these rules in outer and optionsSpace elements.\r\n     // hideSpace uses a simple onClick, which only works when the element is shown.\r\n\r\n     constructor(props) {\r\n          super(props)\r\n          this.state = {\r\n               shown: true, // Whether the options area is shown. Used in JSX.\r\n               // Set 15 second timeout and when it expires, run this.hide.\r\n               // Immediately store the returned id for later use.\r\n               timeoutId: setTimeout(this.hide.bind(this), 15000)\r\n          }\r\n          // Bind functions so we can use the keyword 'this' inside them.\r\n          this.hide = this.hide.bind(this)\r\n          this.show = this.show.bind(this)\r\n          this.resetTimeout = this.resetTimeout.bind(this)\r\n     }\r\n\r\n     hide() { // Hide the options area from view.\r\n          this.setState({ shown: false })\r\n          document.getElementById('outer').addEventListener('click', this.show)\r\n     }\r\n\r\n     show() { // Show the options area. If already shown, just reset timeout.\r\n          this.setState({ shown: true })\r\n          document.getElementById('outer').removeEventListener('click', this.show)\r\n          this.resetTimeout()\r\n     }\r\n\r\n     resetTimeout() { // Reset the 15 second timer for hiding the options.\r\n          clearTimeout(this.state.timeoutId) // Cancel the timeout set earlier.\r\n          var toId = setTimeout(this.hide, 15000) // Set a new 15 second timeout.\r\n          this.setState({timeoutId: toId}) // Store the id of the new timeout.\r\n     }\r\n     // The first time the component mounts, add an event listener to the options\r\n     // space, so whenever it's clicked, it shows.\r\n     componentDidMount() {\r\n          document.getElementById('optionsSpace').addEventListener('click', this.show)\r\n     }\r\n\r\n     render() {\r\n          var h = \"1%\"; // I don't remember why I set the height like this.\r\n          // The Options component takes a function as a prop.\r\n          return (\r\n               <div className=\"TopSpace\" id=\"outer\" style={{ height: h }}>\r\n                    <div className={\"Container \" + (this.state.shown ? \"shown\" : \"hidden\")}>\r\n                         <div id=\"optionsSpace\">\r\n                              <Options resetTimeout={this.resetTimeout} />\r\n                         </div>\r\n                         <div id=\"hideSpace\" onClick={this.hide}>Hide</div>\r\n                    </div>\r\n               </div>\r\n          )\r\n     }\r\n}\r\n\r\nexport default TopSpace;\r\n"]},"metadata":{},"sourceType":"module"}