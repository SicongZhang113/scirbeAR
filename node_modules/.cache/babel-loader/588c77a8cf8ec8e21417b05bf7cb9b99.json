{"ast":null,"code":"var _jsxFileName = \"/Users/liuxinyu/Desktop/ScribeAR.github.io/src/App.js\";\nimport React from 'react';\nimport { useSelector } from 'react-redux';\nimport TopSpace from './components/TopSpace';\nimport Captions from './components/Captions';\nimport MiddleSpace from './components/MiddleSpace';\nimport './App.css';\nexport default function App() {\n  const darkMode = getComputedStyle(document.documentElement).getPropertyValue('--primary'); // #999999\n  // Get global state from Redux. See the React Redux tutorial.\n\n  const textSize = useSelector(state => state.textSize);\n  const numLines = useSelector(state => state.numLines);\n  const invertColors = useSelector(state => state.invertColors); // Convert variables to CSS-friendly strings.\n\n  var sizeString = textSize + 'vh'; // Size of bottom space (text area) relative to text size and number of lines.\n  // 1.5 is an estimate of the ratio of line size to text size.\n  // This is a sloppy way of calculating the height. Please improve on this.\n\n  var botHeight = 36 + 'vh'; // topHeight + botHeight should always = 100vh because we don't want the full\n  // page to scroll (we only want the individual areas to scroll).\n\n  var midHeight = 32 + 'vh';\n  var topHeight = 100 - botHeight + 'vh'; // botHeight += 'vh'\n\n  var bgColor = invertColors ? 'white' : 'black';\n  var color = invertColors ? 'black' : 'white';\n\n  if (bgColor == 'black') {\n    return React.createElement(\"div\", {\n      className: \"App-1\",\n      style: {\n        backgroundColor: 'black',\n        color: 'white'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    }, React.createElement(TopSpace, {\n      height: topHeight,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }), React.createElement(MiddleSpace, {\n      height: midHeight,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }), React.createElement(Captions, {\n      height: botHeight,\n      textSize: sizeString,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }));\n  } else {\n    return React.createElement(\"div\", {\n      className: \"App-2\",\n      style: {\n        backgroundColor: 'white',\n        color: 'black'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, React.createElement(TopSpace, {\n      height: topHeight,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }), React.createElement(MiddleSpace, {\n      height: midHeight,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }), React.createElement(Captions, {\n      height: botHeight,\n      textSize: sizeString,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }));\n  } // You can't comment in JSX.\n  // The style tag is the easiest way to set style based on JS variables.\n\n}","map":{"version":3,"sources":["/Users/liuxinyu/Desktop/ScribeAR.github.io/src/App.js"],"names":["React","useSelector","TopSpace","Captions","MiddleSpace","App","darkMode","getComputedStyle","document","documentElement","getPropertyValue","textSize","state","numLines","invertColors","sizeString","botHeight","midHeight","topHeight","bgColor","color","backgroundColor"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,OAAOC,QAAP,MAAqB,uBAArB;AACA,OAAOC,QAAP,MAAqB,uBAArB;AACA,OAAOC,WAAP,MAAwB,0BAAxB;AACA,OAAO,WAAP;AAEA,eAAe,SAASC,GAAT,GAAe;AACzB,QAAMC,QAAQ,GAAGC,gBAAgB,CAACC,QAAQ,CAACC,eAAV,CAAhB,CAA2CC,gBAA3C,CAA4D,WAA5D,CAAjB,CADyB,CACkE;AAC3F;;AACA,QAAMC,QAAQ,GAAGV,WAAW,CAAEW,KAAD,IAAWA,KAAK,CAACD,QAAlB,CAA5B;AACA,QAAME,QAAQ,GAAGZ,WAAW,CAAEW,KAAD,IAAWA,KAAK,CAACC,QAAlB,CAA5B;AACA,QAAMC,YAAY,GAAGb,WAAW,CAAEW,KAAD,IAAWA,KAAK,CAACE,YAAlB,CAAhC,CALyB,CAMzB;;AACA,MAAIC,UAAU,GAAGJ,QAAQ,GAAG,IAA5B,CAPyB,CAQzB;AACA;AACA;;AACA,MAAIK,SAAS,GAAG,KAAK,IAArB,CAXyB,CAYzB;AACA;;AAEA,MAAIC,SAAS,GAAG,KAAK,IAArB;AACA,MAAIC,SAAS,GAAG,MAAMF,SAAN,GAAkB,IAAlC,CAhByB,CAiBzB;;AACA,MAAIG,OAAO,GAAGL,YAAY,GAAG,OAAH,GAAY,OAAtC;AACA,MAAIM,KAAK,GAAGN,YAAY,GAAG,OAAH,GAAa,OAArC;;AACA,MAAIK,OAAO,IAAI,OAAf,EAAwB;AACtB,WACK;AAAK,MAAA,SAAS,EAAC,OAAf;AAAuB,MAAA,KAAK,EAAE;AACzBE,QAAAA,eAAe,EAAE,OADQ;AAEzBD,QAAAA,KAAK,EAAE;AAFkB,OAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAIK,oBAAC,QAAD;AAAU,MAAA,MAAM,EAAEF,SAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJL,EAKK,oBAAC,WAAD;AAAa,MAAA,MAAM,EAAED,SAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALL,EAMK,oBAAC,QAAD;AAAU,MAAA,MAAM,EAAED,SAAlB;AAA6B,MAAA,QAAQ,EAAED,UAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANL,CADL;AAUD,GAXD,MAWO;AACL,WACK;AAAK,MAAA,SAAS,EAAC,OAAf;AAAuB,MAAA,KAAK,EAAE;AACzBM,QAAAA,eAAe,EAAE,OADQ;AAEzBD,QAAAA,KAAK,EAAE;AAFkB,OAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAIK,oBAAC,QAAD;AAAU,MAAA,MAAM,EAAEF,SAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJL,EAKK,oBAAC,WAAD;AAAa,MAAA,MAAM,EAAED,SAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALL,EAMK,oBAAC,QAAD;AAAU,MAAA,MAAM,EAAED,SAAlB;AAA6B,MAAA,QAAQ,EAAED,UAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANL,CADL;AAUD,GA1CwB,CA2CzB;AACA;;AAEJ","sourcesContent":["import React from 'react';\nimport { useSelector } from 'react-redux'\nimport TopSpace from './components/TopSpace'\nimport Captions from './components/Captions'\nimport MiddleSpace from './components/MiddleSpace'\nimport './App.css'\n\nexport default function App() {\n     const darkMode = getComputedStyle(document.documentElement).getPropertyValue('--primary'); // #999999\n     // Get global state from Redux. See the React Redux tutorial.\n     const textSize = useSelector((state) => state.textSize)\n     const numLines = useSelector((state) => state.numLines)\n     const invertColors = useSelector((state) => state.invertColors)\n     // Convert variables to CSS-friendly strings.\n     var sizeString = textSize + 'vh'\n     // Size of bottom space (text area) relative to text size and number of lines.\n     // 1.5 is an estimate of the ratio of line size to text size.\n     // This is a sloppy way of calculating the height. Please improve on this.\n     var botHeight = 36 + 'vh'\n     // topHeight + botHeight should always = 100vh because we don't want the full\n     // page to scroll (we only want the individual areas to scroll).\n\n     var midHeight = 32 + 'vh'\n     var topHeight = 100 - botHeight + 'vh'\n     // botHeight += 'vh'\n     var bgColor = invertColors ? 'white': 'black'\n     var color = invertColors ? 'black' : 'white'\n     if (bgColor == 'black') {\n       return (\n            <div className=\"App-1\" style={{\n                 backgroundColor: 'black',\n                 color: 'white'\n                }}>\n                 <TopSpace height={topHeight} />\n                 <MiddleSpace height={midHeight} />\n                 <Captions height={botHeight} textSize={sizeString} />\n            </div>\n       )\n     } else {\n       return (\n            <div className=\"App-2\" style={{\n                 backgroundColor: 'white',\n                 color: 'black'\n                }}>\n                 <TopSpace height={topHeight} />\n                 <MiddleSpace height={midHeight} />\n                 <Captions height={botHeight} textSize={sizeString} />\n            </div>\n       )\n     }\n     // You can't comment in JSX.\n     // The style tag is the easiest way to set style based on JS variables.\n\n}\n"]},"metadata":{},"sourceType":"module"}