{"ast":null,"code":"import { combineReducers } from 'redux';\n\nconst textSizeReducer = (state = 6, action) => {\n  switch (action.type) {\n    case 'INCREMENT_TEXTSIZE':\n      return state + 1;\n\n    case 'DECREMENT_TEXTSIZE':\n      return Math.max(1, state - 1);\n\n    default:\n      return state;\n  }\n};\n\nconst lineWidthReducer = (state = 10, action) => {\n  switch (action.type) {\n    case 'INCREMENT_LINEWIDTH':\n      return Math.min(10, state + 1);\n\n    case 'DECREMENT_LINEWIDTH':\n      return Math.max(1, state - 1);\n\n    default:\n      return state;\n  }\n};\n\nconst numLinesReducer = (state = 4, action) => {\n  switch (action.type) {\n    case 'INCREMENT_NUMLINES':\n      return state + 1;\n\n    case 'DECREMENT_NUMLINES':\n      return Math.max(1, state - 1);\n\n    default:\n      return state;\n  }\n};\n\nconst lockScreenReducer = (state = false, action) => {\n  if (action.type === 'FLIP_LOCKSCREEN') return !state;else return state;\n};\n\nconst invertMicVisualReducer = (state = false, action) => {\n  if (action.type == 'FLIP_MICVISUAL') return !state;else return state;\n};\n\nconst invertColorsReducer = (state = false, action) => {\n  if (action.type === 'FLIP_INVERTCOLORS') return !state;else return state;\n};\n\nconst recordingReducer = (state = true, action) => {\n  if (action.type === 'FLIP_RECORDING') return !state;else return state;\n};\n\nconst allReducers = combineReducers({\n  textSize: textSizeReducer,\n  lineWidth: lineWidthReducer,\n  numLines: numLinesReducer,\n  lockScreen: lockScreenReducer,\n  invertColors: invertColorsReducer,\n  recording: recordingReducer\n});\nexport default allReducers;","map":{"version":3,"sources":["/Users/liuxinyu/Desktop/ScribeAR.github.io/src/redux/reducers.js"],"names":["combineReducers","textSizeReducer","state","action","type","Math","max","lineWidthReducer","min","numLinesReducer","lockScreenReducer","invertMicVisualReducer","invertColorsReducer","recordingReducer","allReducers","textSize","lineWidth","numLines","lockScreen","invertColors","recording"],"mappings":"AAAA,SAASA,eAAT,QAAgC,OAAhC;;AAEA,MAAMC,eAAe,GAAG,CAACC,KAAK,GAAG,CAAT,EAAYC,MAAZ,KAAuB;AAC1C,UAAQA,MAAM,CAACC,IAAf;AACK,SAAK,oBAAL;AACK,aAAOF,KAAK,GAAG,CAAf;;AACL,SAAK,oBAAL;AACK,aAAOG,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYJ,KAAK,GAAG,CAApB,CAAP;;AACL;AACK,aAAOA,KAAP;AANV;AAQJ,CATD;;AAWA,MAAMK,gBAAgB,GAAG,CAACL,KAAK,GAAG,EAAT,EAAaC,MAAb,KAAwB;AAC5C,UAAQA,MAAM,CAACC,IAAf;AACK,SAAK,qBAAL;AACK,aAAOC,IAAI,CAACG,GAAL,CAAS,EAAT,EAAaN,KAAK,GAAG,CAArB,CAAP;;AACL,SAAK,qBAAL;AACK,aAAOG,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYJ,KAAK,GAAG,CAApB,CAAP;;AACL;AACK,aAAOA,KAAP;AANV;AAQJ,CATD;;AAWA,MAAMO,eAAe,GAAG,CAACP,KAAK,GAAG,CAAT,EAAYC,MAAZ,KAAuB;AAC1C,UAAQA,MAAM,CAACC,IAAf;AACK,SAAK,oBAAL;AACK,aAAOF,KAAK,GAAG,CAAf;;AACL,SAAK,oBAAL;AACK,aAAOG,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYJ,KAAK,GAAG,CAApB,CAAP;;AACL;AACK,aAAOA,KAAP;AANV;AAQJ,CATD;;AAWA,MAAMQ,iBAAiB,GAAG,CAACR,KAAK,GAAG,KAAT,EAAgBC,MAAhB,KAA2B;AAChD,MAAIA,MAAM,CAACC,IAAP,KAAgB,iBAApB,EACK,OAAO,CAACF,KAAR,CADL,KAEK,OAAOA,KAAP;AACT,CAJD;;AAMA,MAAMS,sBAAsB,GAAG,CAACT,KAAK,GAAG,KAAT,EAAgBC,MAAhB,KAA2B;AACxD,MAAIA,MAAM,CAACC,IAAP,IAAe,gBAAnB,EACE,OAAO,CAACF,KAAR,CADF,KAEK,OAAOA,KAAP;AACN,CAJD;;AAMA,MAAMU,mBAAmB,GAAG,CAACV,KAAK,GAAG,KAAT,EAAgBC,MAAhB,KAA2B;AAClD,MAAIA,MAAM,CAACC,IAAP,KAAgB,mBAApB,EACK,OAAO,CAACF,KAAR,CADL,KAEK,OAAOA,KAAP;AACT,CAJD;;AAMA,MAAMW,gBAAgB,GAAG,CAACX,KAAK,GAAG,IAAT,EAAeC,MAAf,KAA0B;AAC9C,MAAIA,MAAM,CAACC,IAAP,KAAgB,gBAApB,EACK,OAAO,CAACF,KAAR,CADL,KAEK,OAAOA,KAAP;AACT,CAJD;;AAMA,MAAMY,WAAW,GAAGd,eAAe,CAAC;AAC/Be,EAAAA,QAAQ,EAAEd,eADqB;AAE/Be,EAAAA,SAAS,EAAET,gBAFoB;AAG/BU,EAAAA,QAAQ,EAAER,eAHqB;AAI/BS,EAAAA,UAAU,EAAER,iBAJmB;AAK/BS,EAAAA,YAAY,EAAEP,mBALiB;AAM/BQ,EAAAA,SAAS,EAAEP;AANoB,CAAD,CAAnC;AASA,eAAeC,WAAf","sourcesContent":["import { combineReducers } from 'redux';\r\n\r\nconst textSizeReducer = (state = 6, action) => {\r\n     switch (action.type) {\r\n          case 'INCREMENT_TEXTSIZE':\r\n               return state + 1;\r\n          case 'DECREMENT_TEXTSIZE':\r\n               return Math.max(1, state - 1);\r\n          default:\r\n               return state;\r\n     }\r\n}\r\n\r\nconst lineWidthReducer = (state = 10, action) => {\r\n     switch (action.type) {\r\n          case 'INCREMENT_LINEWIDTH':\r\n               return Math.min(10, state + 1)\r\n          case 'DECREMENT_LINEWIDTH':\r\n               return Math.max(1, state - 1);\r\n          default:\r\n               return state;\r\n     }\r\n}\r\n\r\nconst numLinesReducer = (state = 4, action) => {\r\n     switch (action.type) {\r\n          case 'INCREMENT_NUMLINES':\r\n               return state + 1;\r\n          case 'DECREMENT_NUMLINES':\r\n               return Math.max(1, state - 1);\r\n          default:\r\n               return state;\r\n     }\r\n}\r\n\r\nconst lockScreenReducer = (state = false, action) => {\r\n     if (action.type === 'FLIP_LOCKSCREEN')\r\n          return !state;\r\n     else return state;\r\n}\r\n\r\nconst invertMicVisualReducer = (state = false, action) => {\r\n  if (action.type == 'FLIP_MICVISUAL')\r\n    return !state;\r\n  else return state;\r\n}\r\n\r\nconst invertColorsReducer = (state = false, action) => {\r\n     if (action.type === 'FLIP_INVERTCOLORS')\r\n          return !state;\r\n     else return state;\r\n}\r\n\r\nconst recordingReducer = (state = true, action) => {\r\n     if (action.type === 'FLIP_RECORDING')\r\n          return !state\r\n     else return state\r\n}\r\n\r\nconst allReducers = combineReducers({\r\n     textSize: textSizeReducer,\r\n     lineWidth: lineWidthReducer,\r\n     numLines: numLinesReducer,\r\n     lockScreen: lockScreenReducer,\r\n     invertColors: invertColorsReducer,\r\n     recording: recordingReducer\r\n});\r\n\r\nexport default allReducers;\r\n"]},"metadata":{},"sourceType":"module"}