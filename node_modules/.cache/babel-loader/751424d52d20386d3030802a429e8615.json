{"ast":null,"code":"var _jsxFileName = \"/Users/sicongzhang/Documents/ScribeAR/ver3_5/src/components/MiddleSpace/Loudness/AudioVisualiser.js\";\nimport React, { Component } from 'react';\nimport { useSelector } from 'react-redux';\n\nclass AudioVisualiser extends Component {\n  constructor(props) {\n    super(props);\n    this.canvas = React.createRef();\n  }\n\n  draw() {\n    //const bgC = useSelector((state) => state.invertColors)\n    const audioData = this.props.audioData.audioData;\n    const canvas = this.canvas.current;\n    const height = canvas.height;\n    const width = canvas.width;\n    const context = canvas.getContext('2d');\n    let x = 0;\n    const sliceWidth = width * 1.0 / audioData.length;\n    context.lineWidth = 2; //change line color\n\n    context.clearRect(0, 0, width, height);\n    context.strokeStyle = this.props.iscolor ? '#F8F8FF' : '#000000';\n    context.beginPath();\n    context.moveTo(0, height / 2);\n\n    for (const item of audioData) {\n      const y = item / 255.0 * height;\n      context.lineTo(x, y);\n      x += sliceWidth;\n    }\n\n    context.lineTo(x, height / 2);\n    context.stroke();\n  }\n\n  componentDidUpdate() {\n    this.draw();\n  }\n\n  render() {\n    return React.createElement(\"canvas\", {\n      width: \"500vw\",\n      height: \"300vh\",\n      ref: this.canvas,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport default AudioVisualiser;","map":{"version":3,"sources":["/Users/sicongzhang/Documents/ScribeAR/ver3_5/src/components/MiddleSpace/Loudness/AudioVisualiser.js"],"names":["React","Component","useSelector","AudioVisualiser","constructor","props","canvas","createRef","draw","audioData","current","height","width","context","getContext","x","sliceWidth","length","lineWidth","clearRect","strokeStyle","iscolor","beginPath","moveTo","item","y","lineTo","stroke","componentDidUpdate","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,WAAT,QAA4B,aAA5B;;AAGA,MAAMC,eAAN,SAA8BF,SAA9B,CAAwC;AAEtCG,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,MAAL,GAAcN,KAAK,CAACO,SAAN,EAAd;AACD;;AACDC,EAAAA,IAAI,GAAG;AACN;AADM,UAEEC,SAFF,GAEgB,KAAKJ,KAAL,CAAWI,SAF3B,CAEEA,SAFF;AAGN,UAAMH,MAAM,GAAG,KAAKA,MAAL,CAAYI,OAA3B;AACA,UAAMC,MAAM,GAAGL,MAAM,CAACK,MAAtB;AACA,UAAMC,KAAK,GAAGN,MAAM,CAACM,KAArB;AACA,UAAMC,OAAO,GAAGP,MAAM,CAACQ,UAAP,CAAkB,IAAlB,CAAhB;AACA,QAAIC,CAAC,GAAG,CAAR;AACA,UAAMC,UAAU,GAAIJ,KAAK,GAAG,GAAT,GAAgBH,SAAS,CAACQ,MAA7C;AACAJ,IAAAA,OAAO,CAACK,SAAR,GAAoB,CAApB,CATM,CAUN;;AACAL,IAAAA,OAAO,CAACM,SAAR,CAAkB,CAAlB,EAAqB,CAArB,EAAwBP,KAAxB,EAA+BD,MAA/B;AACAE,IAAAA,OAAO,CAACO,WAAR,GAAsB,KAAKf,KAAL,CAAWgB,OAAX,GAAqB,SAArB,GAAiC,SAAvD;AACAR,IAAAA,OAAO,CAACS,SAAR;AACAT,IAAAA,OAAO,CAACU,MAAR,CAAe,CAAf,EAAkBZ,MAAM,GAAG,CAA3B;;AACA,SAAK,MAAMa,IAAX,IAAmBf,SAAnB,EAA8B;AAC3B,YAAMgB,CAAC,GAAID,IAAI,GAAG,KAAR,GAAiBb,MAA3B;AACAE,MAAAA,OAAO,CAACa,MAAR,CAAeX,CAAf,EAAkBU,CAAlB;AACAV,MAAAA,CAAC,IAAIC,UAAL;AACD;;AACFH,IAAAA,OAAO,CAACa,MAAR,CAAeX,CAAf,EAAkBJ,MAAM,GAAG,CAA3B;AACAE,IAAAA,OAAO,CAACc,MAAR;AACF;;AAEDC,EAAAA,kBAAkB,GAAG;AACjB,SAAKpB,IAAL;AACD;;AAEDqB,EAAAA,MAAM,GAAG;AACP,WAAO;AAAQ,MAAA,KAAK,EAAC,OAAd;AAAsB,MAAA,MAAM,EAAC,OAA7B;AAAqC,MAAA,GAAG,EAAE,KAAKvB,MAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;;AApCqC;;AAwCxC,eAAeH,eAAf","sourcesContent":["import React, { Component } from 'react';\nimport { useSelector } from 'react-redux'\n\n\nclass AudioVisualiser extends Component {\n\n  constructor(props) {\n    super(props);\n    this.canvas = React.createRef();\n  }\n  draw() {\n   //const bgC = useSelector((state) => state.invertColors)\n   const { audioData } = this.props.audioData;\n   const canvas = this.canvas.current;\n   const height = canvas.height;\n   const width = canvas.width;\n   const context = canvas.getContext('2d');\n   let x = 0;\n   const sliceWidth = (width * 1.0) / audioData.length;\n   context.lineWidth = 2;\n   //change line color\n   context.clearRect(0, 0, width, height);\n   context.strokeStyle = this.props.iscolor ? '#F8F8FF' : '#000000';\n   context.beginPath();\n   context.moveTo(0, height / 2);\n   for (const item of audioData) {\n      const y = (item / 255.0) * height;\n      context.lineTo(x, y);\n      x += sliceWidth;\n    }\n   context.lineTo(x, height / 2);\n   context.stroke();\n}\n\ncomponentDidUpdate() {\n    this.draw();\n  }\n\n  render() {\n    return <canvas width=\"500vw\" height=\"300vh\" ref={this.canvas} />;\n  }\n\n}\n\nexport default AudioVisualiser;\n"]},"metadata":{},"sourceType":"module"}