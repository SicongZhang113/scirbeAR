{"ast":null,"code":"var _jsxFileName = \"/Users/liuxinyu/Desktop/ScribeAR.github.io/src/components/MiddleSpace/Loudness/AudioAnalyser.js\";\nimport React, { Component } from 'react';\nimport AudioVisualiser from './AudioVisualiser';\n/*global Unit8Array*/\n\nclass AudioAnalyser extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      audioData: new Uint8Array(0)\n    };\n    this.tick = this.tick.bind(this);\n  }\n\n  componentDidMount() {\n    this.audioContext = new (window.AudioContext || window.webkitAudioContext)();\n    this.analyser = this.audioContext.createAnalyser();\n    this.dataArray = new Uint8Array(this.analyser.frequencyBinCount);\n    this.source = this.audioContext.createMediaStreamSource(this.props.audio);\n    this.source.connect(this.analyser);\n    this.rafId = requestAnimationFrame(this.tick);\n  }\n\n  tick() {\n    this.analyser.getByteTimeDomainData(this.dataArray);\n    this.setState({\n      audioData: this.dataArray\n    });\n    this.rafId = requestAnimationFrame(this.tick);\n  }\n\n  componentWillUnmount() {\n    cancelAnimationFrame(this.rafId);\n    this.analyser.disconnect();\n    this.source.disconnect();\n  }\n\n  render() {\n    return React.createElement(AudioVisualiser, {\n      audioData: this.state.audioData,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport default AudioAnalyser;","map":{"version":3,"sources":["/Users/liuxinyu/Desktop/ScribeAR.github.io/src/components/MiddleSpace/Loudness/AudioAnalyser.js"],"names":["React","Component","AudioVisualiser","AudioAnalyser","constructor","props","state","audioData","Uint8Array","tick","bind","componentDidMount","audioContext","window","AudioContext","webkitAudioContext","analyser","createAnalyser","dataArray","frequencyBinCount","source","createMediaStreamSource","audio","connect","rafId","requestAnimationFrame","getByteTimeDomainData","setState","componentWillUnmount","cancelAnimationFrame","disconnect","render"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAAgC,OAAhC;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA;;AAGA,MAAMC,aAAN,SAA4BF,SAA5B,CAAsC;AAEjCG,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACd,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACPC,MAAAA,SAAS,EAAG,IAAIC,UAAJ,CAAe,CAAf;AADL,KAAb;AAGA,SAAKC,IAAL,GAAY,KAAKA,IAAL,CAAUC,IAAV,CAAe,IAAf,CAAZ;AACJ;;AAEDC,EAAAA,iBAAiB,GAAG;AACpB,SAAKC,YAAL,GAAoB,KAAKC,MAAM,CAACC,YAAP,IACvBD,MAAM,CAACE,kBADW,GAApB;AAEA,SAAKC,QAAL,GAAgB,KAAKJ,YAAL,CAAkBK,cAAlB,EAAhB;AACA,SAAKC,SAAL,GAAiB,IAAIV,UAAJ,CAAe,KAAKQ,QAAL,CAAcG,iBAA7B,CAAjB;AACA,SAAKC,MAAL,GAAc,KAAKR,YAAL,CAAkBS,uBAAlB,CAA0C,KAAKhB,KAAL,CAAWiB,KAArD,CAAd;AACA,SAAKF,MAAL,CAAYG,OAAZ,CAAoB,KAAKP,QAAzB;AACA,SAAKQ,KAAL,GAAaC,qBAAqB,CAAC,KAAKhB,IAAN,CAAlC;AACD;;AAECA,EAAAA,IAAI,GAAG;AACP,SAAKO,QAAL,CAAcU,qBAAd,CAAoC,KAAKR,SAAzC;AACA,SAAKS,QAAL,CAAc;AAAEpB,MAAAA,SAAS,EAAE,KAAKW;AAAlB,KAAd;AACA,SAAKM,KAAL,GAAaC,qBAAqB,CAAC,KAAKhB,IAAN,CAAlC;AACD;;AAEDmB,EAAAA,oBAAoB,GAAG;AACtBC,IAAAA,oBAAoB,CAAC,KAAKL,KAAN,CAApB;AACA,SAAKR,QAAL,CAAcc,UAAd;AACA,SAAKV,MAAL,CAAYU,UAAZ;AACD;;AAEDC,EAAAA,MAAM,GAAG;AACL,WAAO,oBAAC,eAAD;AAAiB,MAAA,SAAS,EAAE,KAAKzB,KAAL,CAAWC,SAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;;AAlCiC;;AAuCtC,eAAeJ,aAAf","sourcesContent":["import React, {Component } from 'react';\nimport AudioVisualiser from './AudioVisualiser'\n/*global Unit8Array*/\n\n\nclass AudioAnalyser extends Component {\n\n     constructor(props) {\n          super(props);\n          this.state = {\n                audioData : new Uint8Array(0)\n          };\n          this.tick = this.tick.bind(this);\n     }\n\n     componentDidMount() {\n     this.audioContext = new (window.AudioContext ||\n       window.webkitAudioContext)();\n     this.analyser = this.audioContext.createAnalyser();\n     this.dataArray = new Uint8Array(this.analyser.frequencyBinCount);\n     this.source = this.audioContext.createMediaStreamSource(this.props.audio);\n     this.source.connect(this.analyser);\n     this.rafId = requestAnimationFrame(this.tick);\n   }\n\n     tick() {\n     this.analyser.getByteTimeDomainData(this.dataArray);\n     this.setState({ audioData: this.dataArray });\n     this.rafId = requestAnimationFrame(this.tick);\n   }\n\n   componentWillUnmount() {\n    cancelAnimationFrame(this.rafId);\n    this.analyser.disconnect();\n    this.source.disconnect();\n  }\n\n  render() {\n      return <AudioVisualiser audioData={this.state.audioData} />;\n    }\n\n\n}\n\nexport default AudioAnalyser;\n"]},"metadata":{},"sourceType":"module"}