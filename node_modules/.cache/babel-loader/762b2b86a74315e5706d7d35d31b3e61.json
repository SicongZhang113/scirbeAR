{"ast":null,"code":"var _jsxFileName = \"/Users/liuxinyu/Desktop/ScribeAR.github.io/src/components/TopSpace/Options/Micvisual/index.js\";\nimport React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport './index.css';\nimport { flip_micVisual } from '../../../../redux/actions'; // This code only works if the initial state is Off. It's surprisingly way harder\n// to get this to work if you want the inital state of the checkbox to be checked.\n\nexport default function Micvisual(props) {\n  const mic = state => state.mic;\n\n  const setting = useSelector(mic); // Get current value of recording.\n  // useDispatch returns the state modifying function, invoked below.\n\n  const dispatch = useDispatch(); // flip recording when space bar is pressed\n  //const setting = useSelector(props.setting)\n  // useDispatch returns the state modifying function, invoked below.\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, !setting ? \"Get Mic Input\" : \"Stop Mic Input\", React.createElement(\"div\", {\n    className: \"record-btn-wrapper\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: !setting ? \"record-btn hidden\" : \"record-btn shown\",\n    onClick: () => dispatch(flip_micVisual()),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: !setting ? \"stop-btn shown\" : \"stop-btn hidden\",\n    onClick: () => dispatch(flip_micVisual()),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  })));\n}","map":{"version":3,"sources":["/Users/liuxinyu/Desktop/ScribeAR.github.io/src/components/TopSpace/Options/Micvisual/index.js"],"names":["React","useSelector","useDispatch","flip_micVisual","Micvisual","props","mic","state","setting","dispatch"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAO,aAAP;AACA,SAASC,cAAT,QAA+B,2BAA/B,C,CAEA;AACA;;AAEA,eAAe,SAASC,SAAT,CAAmBC,KAAnB,EAA0B;AAErC,QAAMC,GAAG,GAAIC,KAAD,IAAWA,KAAK,CAACD,GAA7B;;AACA,QAAME,OAAO,GAAGP,WAAW,CAACK,GAAD,CAA3B,CAHqC,CAGJ;AACjC;;AACA,QAAMG,QAAQ,GAAGP,WAAW,EAA5B,CALqC,CAOrC;AAEC;AACA;;AAGA,SACK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACM,CAACM,OAAD,GAAU,eAAV,GAA4B,gBADlC,EAEK;AAAK,IAAA,SAAS,EAAC,oBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACK;AAAK,IAAA,SAAS,EAAE,CAACA,OAAD,GAAW,mBAAX,GAAiC,kBAAjD;AACK,IAAA,OAAO,EAAE,MAAMC,QAAQ,CAACN,cAAc,EAAf,CAD5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADL,EAGQ;AAAK,IAAA,SAAS,EAAE,CAACK,OAAD,GAAW,gBAAX,GAA8B,iBAA9C;AACE,IAAA,OAAO,EAAE,MAAMC,QAAQ,CAACN,cAAc,EAAf,CADzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHR,CAFL,CADL;AAWJ","sourcesContent":["import React from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport './index.css'\nimport { flip_micVisual } from '../../../../redux/actions'\n\n// This code only works if the initial state is Off. It's surprisingly way harder\n// to get this to work if you want the inital state of the checkbox to be checked.\n\nexport default function Micvisual(props) {\n\n    const mic = (state) => state.mic\n    const setting = useSelector(mic) // Get current value of recording.\n    // useDispatch returns the state modifying function, invoked below.\n    const dispatch = useDispatch()\n\n    // flip recording when space bar is pressed\n\n     //const setting = useSelector(props.setting)\n     // useDispatch returns the state modifying function, invoked below.\n\n\n     return (\n          <div>\n               {!setting? \"Get Mic Input\" : \"Stop Mic Input\"}\n               <div className=\"record-btn-wrapper\">\n                    <div className={!setting ? \"record-btn hidden\" : \"record-btn shown\"}\n                         onClick={() => dispatch(flip_micVisual())} />\n                       <div className={!setting ? \"stop-btn shown\" : \"stop-btn hidden\"}\n                         onClick={() => dispatch(flip_micVisual())} />\n               </div>\n          </div>\n     )\n}\n"]},"metadata":{},"sourceType":"module"}